// Given an infinite grid, initial cell position (x, y) and a sequence of other cell position which needs to be covered 
//in the given order. The task is to find the minimum number of steps needed to travel to all those cells.


import java.util.*;

class point{
	int x,y;
	point(int a,int b){
		x = a;
		y = b;
	}
}

class minDist{
	static int shortestPath(point p1,point p2){
		int dx = Math.abs(p1.x-p2.x);
		int dy = Math.abs(p1.y-p2.y);
		return Math.max(dx,dy);
	}

	static int coverPoints(point sequence[],int size){
		int stepCount = 0;
		for(int i = 0;i<size-1;i++){
			stepCount+=shortestPath(sequence[i],sequence[i+1]);
		}
		return stepCount;
	}
}
